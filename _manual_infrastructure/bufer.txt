package Logic.PathsMachines;

import Logic.FootprintSpaceTime.Point;
import Logic.GlobalVariable;
import Logic.Position;

public class PositionClass implements Position {
    private Point point;
    private double rotation;

    public PositionClass(Point point, double rotation) {
        this.point = point;
        this.rotation = rotation;
    }

    @Override
    public Point getCoordinats() {
        return this.point;
    }

    @Override
    public double getRotation() {
        return this.rotation;
    }

    @Override
    public Position getApproximation(
            double timeFirst,
            Position secondPosition,
            double timeSecond,
            double timeApproximation
    ) { //FIXME ass tests
        Point approximationPoint = this.point.getApproximationWith(
                timeFirst,
                secondPosition.getCoordinats(),
                timeSecond,
                timeApproximation
        );
        double mediumAngle = mediumAngle(secondPosition.getRotation(), this.getRotation());
        Position result = new PositionClass(approximationPoint, mediumAngle);
        return result;
    }

    @Override
    public double getRotationDegree() {
        return this.getRotation() * 180 / Math.PI;
    }


    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;


        Position other = (Position) obj;
        return (this.getCoordinats().equals(other.getCoordinats()))
                && GlobalVariable.equalsNumber(this.getRotation(), other.getRotation());
    }

    @Override
    public String toString() {
        return "rotation: " + rotation + " " + point.toString();
    }

    private double mediumAngle(double angle1, double angle2) {
    }

    private interface CalculatorMediumAngle {
        public double getMediumAngle();
    }

    private class CalculatorMediumAngleClass implements CalculatorMediumAngle {
        double minAngle;
        double maxAngle;
        double distanceBetweenAnglesForHalf1;
        double distanceBetweenAnglesForHalf2;
        double angle1Half;
        double angle2Half;

        public CalculatorMediumAngleClass(double angle1, double angle2) {
            if (angle1 < angle2) {
                this.minAngle = angle1;
                this.maxAngle = angle2;
            } else {
                this.minAngle = angle2;
                this.maxAngle = angle1;
            }
            assert(minAngle < 2 * Math.PI);
            assert(maxAngle < 2 * Math.PI);
        }

        @Override
        public double getMediumAngle() {
            calculateAngle1Half();
            calculateAngle2Half();
        }

        private double returnAngleWithMinDistanceBetweenAngles() {

        }

        private double calculateAngle1Half() {
            angle1Half = (minAngle + maxAngle) / 2;
        }

        private double calculateAngle2Half() {

        }
    }
}
